#+TITLE: Last Chapter
#+AUTHOR: Rick Neff
#+EMAIL: rick.neff@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:4 num:t toc:t \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything entitiespretty

** TODO Add Drawers in which to stuff mostly finished paragraphs
** TODO YZ@

  \ldquo{}Isn\rsquo{}t it interesting how languages either facilitate or impede
  communication?\rdquo asked Til, just as Ila and Abu entered his den. Ila replied,
  without missing a beat, \ldquo{}I know programming languages facilitate communication
  with computers, but I don\rsquo{}t see the impediment\rdquo{}. \ldquo{}I do,\rdquo said Abu. \ldquo{}Not
  knowing any programming languages, except a little lisp, I suppose, impedes my
  communication with you when you\rsquo{}re talking programming.\rdquo \ldquo{}Yes\rdquo, said Ila, \ldquo{}but
  ignorance on your part is not the fault of the languages. So, Til, did you
  mean ignorance of languages is the impediment?\rdquo

  \ldquo{}No, not necessarily. Sometimes a perfectly natural and known language like
  English is used, or I should say /misused/, to obfuscate rather than
  communicate --- to hide rather than reveal meaning. I\rsquo{}ll come back to this
  point later.\rdquo

  \ldquo{}So the question, what is a language, with its obvious answer, a language is
  something used to communicate, is too general in one sense, and too specific
  in another.\rdquo

  As you\rsquo{}ll see, languages can be generalized to a set of strings, but made more
  specific by /how/ that set is defined. Phrase-Structure Grammars --- PSGs ---
  are the tools (rules) used to define which strings are valid members of the
  language associated with that PSG. Now let me be clear what that association
  is. It is that PSGs /generate/ languages, and so of course, languages are
  /generated/ (built) by PSGs.

  In English (or any natural, human language) you follow the rules when you
  adhere to the grammar. A main component of a formally defined grammar is the
  set of productions --- the rules that /produce/ valid strings in the language.
  In essence, applying these rules is how different strings of words (phrases,
  sentences) are generated. Deliberately, or even ignorantly violating these
  rules leads to confusion and failed communication. Because the grammatical
  rules of English are so complex, ambiguity and misunderstanding frequently
  lurk beneath the surface.

  Take what you said earlier, Ila. "I know programming languages facilitate X".
  (I\rsquo{}m abbreviating.) One sentence, or two?

  I know programming. Languages facilitate X.

  Abu said, it seems pretty clear from the context that it\rsquo{}s one sentence. Ila
  said, I agree. I don\rsquo{}t see the problem.

  It\rsquo{}s NOT a problem --- for you. Missing the context, and minus the fluidity
  and rapidity with which you uttered that ONE sentence, however, it could be
  misconstrued --- legally but erroneously parsed --- into two.

  Take this imperative statement: Love One Another. A Christian maxim, if I\rsquo{}m
  not mistaken.

  Ila and Abu glanced at each other in surprise. Til, til now, had never brought
  up religion in any of their discussions, whereas *they* had certainly broached
  the subject, on more than one occasion, when it was just the two of them,
  meeting to work on homework assignments, or just waiting for Til. Ila thought
  Abu, a Mormon, hopelessly deluded. Abu thought Ila, an evangelical Christian,
  a prospective Mormon, if she could only get past her myopia! Now to hear Til
  bring this up was a tantalizing turn, and mildly amusing to all three of them
  when Ila and Abu said in unison, John 13:34.

  Yes, well, very good, said Til, a little taken aback. I see you both know your
  Bible. If they think, thought Til, that this is leading into a religious
  discussion, they will be disappointed. Not that he was opposed to hearing
  their religious opinions, just not right now. (When, then? asked a nagging
  voice in his head. He ignored it. But God was still to be the subject of a
  sentence.)

  This is not the simplest English grammatical construction. Simpler would be
  God Loves You, which is in Subject-Verb-Object order, very common in English.
  You could make sense of each of the other five permutations, but only by
  giving a lot of context.

  Love Another One. 

  One Love Another.

  One Another Love.

  Another Love One.

  Another One Love.

  So, said Ila, are you saying word order causes communication problems?

  Hmmm, said Abu. Have you ever tried to make sense of some kinds of poetry?
  Poets are always scrambling word order to fit some rhyme or meter scheme.
  Like in a poem by Wordsworth that I just read:

#+BEGIN_QUOTE
  Bliss was it in that dawn to be alive.
  But to be young was very Heaven!
#+END_QUOTE

*** TODO Add endnote with reference to this poem by Wordsworth

  Said Til, Or from a more familiar poem: Quoth the raven instead of The raven
  said. Still perfectly correct. In fact, saying The raven quoth is *not*
  grammatical, by the very special rule attached to that very archaic word.

  So, not so much word order as word choice. Remember I started talking about
  the misuse of English to obfuscate? *Jargon* is the apposite word here. This
  misuse of language encompasses erecting barriers in the guise of facilitators.
  We justify ourselves in this activity because of the benefits --- and there
  *are* benefits --- but do we ever weigh them against the costs?

  Benefit-wise, jargon saves time and space by compressing information that
  needs sharing, but somewhat-intangible-cost-wise that very efficiency impedes
  understanding by outsiders of what insiders are saying. Hiding meaning from
  the uninitiated is such a powerful urge, and human vanity is an imp that eggs
  us on.

  For example, what does partial template specialization mean? And what is the
  cardinality of the power set?

  I can tell you the answer to your second question, but I have no clue about
  the first, said Ila.

  Abu said, I agree, but regarding the second question, do you think it\rsquo{}s better
  to put it more simply, like, how many subsets does a set of size *n* have?

  I do, said Til. Math is a language that desperately needs less jargon, more
  clarity. And not to keep you in suspense, well, not to keep you from the
  adventure of discovery with a little hint, partial template specialization is
  a very obscure quote-unquote feature of the C++ language.

  Ila said, I'll check it out, but just from the sound of it I'm glad C++ is not
  the language my company uses! Abu added, Me too! Ila said, You run a nursery,
  what are you talking about? Well, said Abu, we just hired a programmer to help
  us manage our inventory and production. Til interrupted, Let's talk about the
  programming language choice issue later.

  But speaking of business, you have no doubt heard the stories about when a
  business consultant, tongue firmly in cheek --- or not --- randomly chooses
  three words from three different lists to create for client consideration
  impressive-sounding, meaningless phrases, like

  customer value trajectory, or stratified business intelligence, or hypercubic
  mission criticality.

  Wow, did you just make those up? wondered Abu, silently. Ila said, I hear that
  stuff all the time from the consultants my company hires. It\rsquo{}s worse than
  nonsense, if you ask me.

  But not all of it is so obviously bad, said Til. Let me put it this way.
  Proclivities, what a nice word! Many people have proclivities, inclinations,
  predispositions to use more words, or bigger words, or *shinier* words than
  necessary to get what they want. Flattery is replete with this abuse of
  language.

  Abu rose to the challenge: Your mellifluous speech shows a penchant for
  pulchritudinous word marshalling.

  \ldquo{}/Marshmallowing/, you mean\rdquo, puffed Ila. \ldquo{}Sicky sweet, with no nutritional
  value!\rdquo

  So you agree it\rsquo{}s a problem! winked Til. Both Abu and Ila nodded and chuckled.

  Well, it\rsquo{}s not one we\rsquo{}re going to solve today, he said. So let\rsquo{}s go back to
  talking about problems in mathematics. Mathematical language, unlike natural
  language, is precise and unambiguous. Equations --- tautologies --- always
  true. Never a doubt. Pure syntax without the clouding confusion of semantics.

  That\rsquo{}s the official story. Now let me qualify that a bit. One of the, if not
  *the* most brilliant mathematical logicians of all time, Kurt G\ouml{}del, once
  said, "The more I think about language, the more it amazes me that people ever
  understand each other." What amazes me about mathematicians, who are people
  too, is that they are such poor writers --- when writing mathematics, at
  least. I alluded to this a few minutes ago. Math writing is notorious for its
  lack of clarity, despite its claim of delivering unadulterated truth. (Donald
  Knuth has a great example of the contrast. Endnote, take from Celebrate
  Clarity document.)

  Think about what you know about the language of logic. It had something of a
  learning curve when you first encountered it, right? Formal logic is a
  formidable but foundational system of thought, a way to give /precision/ to
  thought and reasoning, that can nonetheless trip up the unwary. Since I just
  mentioned Kurt G\ouml{}del, let me give you a description of formal systems, or at
  least, the /rules/ of formal systems, from the book /Incompleteness: The Proof
  and Paradox of Kurt G\ouml{}del/, by Rebecca Goldstein:

*** TODO Put in the endnote
     on page 86.

  This passage pauses while expressing the point of view that \ldquo{}mathematics is
  merely syntactic;\rdquo

#+BEGIN_QUOTE
  its truth derives from the rules of formal systems, which are of three basic
  sorts: the rules that specify what the symbols of the system are (its
  \ldquo{}alphabet\rdquo); the rules that specify how the symbols can be put together into
  what are called well-formed formulas, standardly abbreviated \ldquo{}wff,\rdquo and
  pronounced \ldquo{}woof\rdquo; and the rules of inference that specify which wffs can be
  derived from which.
#+END_QUOTE

** TODO Have Abu and/or Ila interject some comment here.
   Relate wffs to what they have seen before. And what they will see hereafter.

*** TODO Find the right place to have Abu comment
    I like this quote from one of the books you recommended that I just started
    reading. The authors say

#+BEGIN_QUOTE
  What we present may not resemble math, because we avoid the cryptic equations,
  formulas, and graphs that many people have come to know and fear as
  mathematics. Indeed, those symbols are the memorable icons of an
  often-forbidding foreign language of mathematical jargon, but it\rsquo{}s not the
  only language of mathematics and it does not reside at the center of the
  subject. The deepest and richest realms of mathematics are often devoid of the
  cryptic symbols that have baffled students through the generations. Ideas ---
  intriguing, surprising, fascinating, and beautiful --- are truly at the heart
  of mathematics.
#+END_QUOTE

   (Endnote, /Coincidences, Chaos, and All That Math Jazz --- Making Light of
   Weighty Ideas/ by Edward B. Burger and Michael Starbird.

** TODO Talk about another problem of language
   Its sequentiality. A problem (bug? feature?) of language is the problem of
   linearity --- or sequentiality --- words must be written out or spoken and
   then read or heard in sequence, over time, instead of just apprehended \ldquo{}all
   at once\rdquo --- /in toto/.

   
  While obviously mathematical in nature, indeed, *discrete* mathematical, let\rsquo{}s
  narrow our problems focus to problems in computer science.

  Computer scientists, especially those into theoretical computer science, like
  to cast problems into the common mold of languages. They do this for technical
  reasons, more thoroughly delved into in a course on computational theory. But
  here is a simple, favorite example: Is 23 prime? This is a decision problem
  whose answer is yes, easily verified by simply trying to divide 23 by 2 and 3,
  and failing on both counts, of course. This decision could *also* be made by
  sequentially searching for and finding the string "23" in the set of strings
  ["2" "3" "5" "7" "11" "13" "17" "19 "23" ...].

** TODO Interject an Exercise
   Why do we not need to also do trial division of 23 by 5, 7, 11, etc., to
   clinch its primeness?

#+BEGIN_SRC emacs-lisp
  (format "%S" (number-to-string 23))
#+END_SRC

#+RESULTS:
: "23"

#+BEGIN_SRC emacs-lisp :results raw
  (format "%S" (member (number-to-string 23)
                       (map 'list 'number-to-string [2 3 5 7 11 13 17 19 23])))
#+END_SRC

#+RESULTS:
("23")

  This set of strings is a language, and if you allow that the \ldquo{}...\rdquo stands for
  an infinity of bigger and bigger strings of this rather well-known kind, it is
  the language of PRIMES. It is given the name PRIMES, at any rate. So, does
  PRIMES contain the string "23232323232323232323"? is another way to ask, is
  23232323232323232323 prime? The answer is no --- it\rsquo{}s a composite number with
  seven prime factors --- including 23 --- but the computational solution to
  that set membership determination problem is significantly harder than the one
  for 23. It\rsquo{}s not done by simply searching in a static list. While many lists
  of primes exist, no one creates lists with every prime in it up to some huge
  limit. True, programs exist that can do that, using some variation of the
  classic Sieve of Eratosthenes, which goes *way* back, showing how old this
  problem is. But the point is, to solve a language membership problem you need
  computational strategies and tactics and resources. Simply put, we can /model
  computation/ most generally in terms of machinery that can input a string, and
  output a \ldquo{}yes\rdquo or a \ldquo{}no\rdquo --- \ldquo{}in the language\rdquo, or \ldquo{}not\rdquo.

*** TODO Add endnote on Sieve of Eratosthenes (see below)

  Ila said, But not every problem has a yes-or-no answer, and Abu agreed,
  offering "Like sorting, which I understand to be a typical problem for
  computers."

  Ah, my young friends, Til chuckled. It so happens you are right, but computer
  scientists are clever people, and they have figured out a way to model a very
  large number of problems *as* decision problems, or as a series of decision
  problems. Your very example of sorting, Abu, is one of the easiest.

  How so?, said Abu, exchanging a puzzled look with Ila.

  Look at a simple example. Sorting =(13 2 26)= in ascending order is a matter
  of answering three yes-or-no questions: is 13 less than 2 (no, so swap them),
  is 2 less than 26 (yes, so don\rsquo{}t swap them), and, is 13 less than 26 (yes, so
  leave them where they are as well). The result: =(2 13 26)=.

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((unsorted '(13 2 26))
         (a (nth 0 unsorted))
         (b (nth 1 unsorted))
         (c (nth 2 unsorted)))
    (if (< a b)
        (if (< a c)
            (if (< b c)
                (list a b c)
              (list a c b))
          (list c a b))
      (if (< b c)
          (if (< a c)
              (list b a c)
            (list b c a))
        (list c b a))))
#+END_SRC

#+RESULTS:
(2 13 26)

  Ila was still puzzled. "How does that relate to a set membership decision problem?"
  Abu grinned his big, I think I know grin, and said: Let me try to answer that.
  Til said, Go ahead! as Ila clenched her teeth. She thought she knew how now too.

  In the realm of integers, I can take the /language/ ["1" "2" "3" "4" "5" "6"
  ...] and split it up into subsets like so:

  less-than-2: ["1"]

  less-than-3: ["1" "2"]

  less-than-4: ["1" "2" "3"]

  and so on, as many as I like. Then for the question, is a < b, just ask is a
  in the subset less-than-b?

  Ila frowned. But isn\rsquo{}t that a way, way inefficient way to compare two numbers?
  Til said, Yes, it is, but if we\rsquo{}re not concerned with efficiency, that
  approach certainly works.

  But consider a big advantage of treating numbers as strings of digits. As you
  know, when the numbers get big we need special procedures if we want to do
  arithmetic with them. Let\rsquo{}s lump the relational operations with the arithmetic
  ones, and ask, how would one answer a simple =a < b= question, given:

#+BEGIN_SRC emacs-lisp :results silent
  (setq a-as-string "361070123498760381765950923497698325576139879587987251757151" 
        b-as-string "36107058266725245759262937693558834387849309867353286761847615132153745")
#+END_SRC
 
#+BEGIN_SRC emacs-lisp :results raw
  (< (length a-as-string) (length b-as-string))   
#+END_SRC

#+RESULTS:
t

  That\rsquo{}s easy! b is bigger, because it has more digits, said Ila. Right, said
  Abu. At least, as long as the first dozen digits of b are not zeros! Ila
  nodded agreement. And even if the strings were the same length, a
  digit-by-digit comparison would soon reveal the answer. Abu quickly added, So,
  banning leading zeros in these strings-of-digits, /lexicographical/ ordering
  comes to mind as a convenient way to sort them, one that can answer all
  relative size questions. Am I right?

  Til nodded while Ila thought, Of course you are, smarty pants, then said, But
  why the jargony *lexicographical*? Isn\rsquo{}t there a better word than that?

  Abu said, I don\rsquo{}t remember where I saw that, and no, I don\rsquo{}t know of an
  another, easier way to say what it means. What, technically speaking, *does*
  it mean, Til?

  \ldquo{}You\rsquo{}re about to find out!\rdquo Til said, as he flashed them his mischievous
  smile.

                    -~-~-~-~-~-

*** ZCF 

   In normal usage, a language is something we use to communicate, in speaking
   or writing. In theoretical computer science, a language is no more and no
   less than some subset of a set of all strings over some alphabet. Related
   formal definitions follow:

:VTO:
    An *alphabet* is any non-empty, finite set (typically abbreviated \Sigma).

    Not letters, *symbols* are what the members or elements of an *alphabet* are
    called.

    A *string* is a finite *sequence* of *symbols* from a given *alphabet*.

    These are usually written as symbols placed side-by-side without adornments
    of brackets or braces, commas or spaces --- so abab rather than {a, b, a, b}
    or [a b a b]. They are thus like lisp symbols, whose names are lisp strings,
    which are sequences of characters, which are integers. They differ from lisp
    symbols by accommodating more alphabets. For example, 123 is a *string* over
    the alphabet [0 1 2 3 4 5 6 7 8 9] --- in lisp it would be a number.

    The *length* of a *string* is the number of *symbols* contained in the *string*.

    \vert{}w\vert denotes the *length* of w, in another overloading of vertical bars.
    
    The *empty* string is a *string* that has a *length* of zero. (Abbreviated \lambda or \epsilon.)
   
    The process of appending the *symbols* of one string to the end of another
    *string*, in the same order, is called *concatenation*.
:END:

#+BEGIN_SRC emacs-lisp
  (concat "ABC" "XYZ")
#+END_SRC

#+RESULTS:
: ABCXYZ

:VTO:
  A method of ordering *strings* called *lexicographic ordering* differs from
  so-called *dictionary ordering* in one essential way. The former method sorts
  *strings* /first/ by increasing *length* (so shorter *strings* come before
  longer ones) and /then/ by the predefined (*dictionary*) order of the *symbols*
  as given in association with the *strings*\rsquo *alphabet*.

  In *lexicographical ordering* the *string* =baa= would come before =abab=
  because it is shorter by one symbol.

  In *dictionary ordering* lengths are ignored, so the *string* =abab= would
  come before =baa=, because =a= comes before =b= in the *alphabet*.
  
  Why this length consideration is essential will become clear when the \star
  operation is discussed below.
:END:

:FLESH-OUT:
  - examples of state diagrams as graphs
  - derivations as abstract syntax trees.
  - simple models of finite-state automata (like a 1-bit computer (with two
    states)).
:END:

  To reiterate, a *language* is a subset of a set of *strings*. But which ones?
  That\rsquo{}s where *grammars* come into play.

:VTO:
   A *Phrase-Structure Grammar* (PSG) is a four-tuple:

   G = [N T S P] where

   - N is a set of Nonterminals (also called Variables)
   - T is a set of Terminals (N \cap T = \emptyset)
   - S is the Start variable (S \in N)
   - P is a finite set of Productions (Rules), each one mapping a Nonterminal to
     a string of Nonterminals and Terminals.
:END:

   To start with something familiar, here is a sample PSG [N T S P] for a (super
   small) subset of the English language:

   N = [SENTENCE NOUN-PHRASE VERB-PHRASE ARTICLE ADJECTIVE NOUN VERB ADVERB]

   S = SENTENCE

   T = [the hungry sleepy cat dog chases runs quickly slowly]

   In the rules for this PSG, note that the vertical bar (\vert) means OR, e.g., the
   NOUN rule produces either =cat= or =dog= (exclusive-OR):

   | P = [ |             |   |                                     |
   |       | SENTENCE    | \rightarrow | NOUN-PHRASE VERB-PHRASE NOUN-PHRASE |
   |       | SENTENCE    | \rightarrow | NOUN-PHRASE VERB-PHRASE             |
   |       | NOUN-PHRASE | \rightarrow | ARTICLE ADJECTIVE NOUN              |
   |       | NOUN-PHRASE | \rightarrow | ARTICLE NOUN                        |
   |       | VERB-PHRASE | \rightarrow | VERB-PHRASE ADVERB                  |
   |       | VERB-PHRASE | \rightarrow | VERB                                |
   |       | ARTICLE     | \rightarrow | the \vert \lambda                             |
   |       | ADJECTIVE   | \rightarrow | hungry \vert sleepy                     |
   |       | NOUN        | \rightarrow | cat \vert dog                           |
   |       | VERB        | \rightarrow | chases \vert runs                       |
   |       | ADVERB      | \rightarrow | slowly \vert quickly                    |
   | ]     |             |   |                                     |


:VTO:
  The process (called *derivation*) of producing a sequence of terminals from
  the Start Nonterminal by replacing Nonterminals one at a time by applying some
  Rule is an iterative process illustrated below with two random components:
:END:
  
  In the following sample code, productions are represented as an alist of
  symbols. The =car= is the symbol to the left of the arrow of a production, the
  =cdr= captures the symbols to the right of the arrow. The productions alist is
  reversed and stored as well --- which alist to use at any step is the first
  choice that is randomly decided. Nonterminals are unbound symbols. Terminals
  are bound symbols whose values are their string names. Which terminal to
  use when only terminals are options (e.g., in the =ARTICLE=, =ADJECTIVE=,
  =NOUN=, =VERB= and =ADVERB= rules) is the second choice that is randomly
  decided.

#+BEGIN_SRC emacs-lisp :results silent
  (setq the "the" es ""
        hungry "hungry" sleepy "sleepy"
        cat "cat" dog "dog"
        chases "chases" runs "runs"
        slowly "slowly" quickly "quickly"
        productions
        '((SENTENCE NOUN-PHRASE VERB-PHRASE NOUN-PHRASE)
          (SENTENCE NOUN-PHRASE VERB-PHRASE)
          (NOUN-PHRASE ARTICLE ADJECTIVE NOUN)
          (NOUN-PHRASE ARTICLE NOUN)
          (VERB-PHRASE VERB-PHRASE ADVERB)
          (VERB-PHRASE VERB)
          (ARTICLE the es)
          (ADJECTIVE hungry sleepy)
          (NOUN cat dog)
          (VERB chases runs)
          (ADVERB slowly quickly))
        reverse-productions (reverse productions))

  (defun is-terminal (sym)
    (and (symbolp sym) (boundp sym)))

  (setq random-hw-index -1 random-hw-indices [1 1 0 0 0 1 1 1 1 1 1 1 1 1 1])
  (defun random-hw (ignore) (elt random-hw-indices (incf random-hw-index))) 

  (defun nonterminals-remain (derivation)
    (not (every 'is-terminal derivation)))

  (defun derive (LHS)
    (let* ((rules (if (zerop (random-hw 2)) productions reverse-productions))
           (RHS (cdr (assoc LHS rules))))
      (if (null RHS)
          (list LHS)
        (if (nonterminals-remain RHS)
            RHS
          (list (nth (random-hw (length RHS)) RHS))))))

  (defun transform-terminal (terminal)
    (or (and (boundp terminal) (symbol-value terminal))
        (symbol-name terminal)))

  (defun find-derivation (start-symbol)
    (let ((derivation (list start-symbol)))
      (while (nonterminals-remain derivation)
        (setq derivation (apply 'append (mapcar 'derive derivation))))
      (mapconcat 'transform-terminal derivation " ")))
#+END_SRC 

   The following derivation would be the results if the sequence of calls to
   =random= returned [1 1 0 0 0 1 1 1 1 1 1 1 1 1 1]:

   | SENTENCE | \rightarrow | NOUN-PHRASE VERB-PHRASE         |
   |          | \rightarrow | ARTICLE NOUN VERB-PHRASE        |
   |          | \rarr | ARTICLE NOUN VERB-PHRASE ADVERB |
   |          | \rarr | ARTICLE NOUN VERB ADVERB        |
   |          | \rightarrow | the NOUN VERB ADVERB            |
   |          | \rightarrow | the dog VERB ADVERB             |
   |          | \rightarrow | the dog runs ADVERB             |
   |          | \rarr | the dog runs quickly            |

#+BEGIN_SRC emacs-lisp
  (find-derivation 'SENTENCE)
#+END_SRC

#+RESULTS:
: the dog runs quickly

#+RESULTS0:
: the cat runs

#+RESULTS1:
: the cat chases  hungry dog

#+RESULTS2:
: the dog chases quickly quickly quickly

#+RESULTS3:
: the sleepy dog chases the sleepy cat

   Using the above example as a guide, produce derivations for each of the
   following sentences, and verify it by giving the return sequence of calls to
   =random=.

   :EXERCISE:
    the sleepy cat runs slowly
   :END:

   :EXERCISE:
    the hungry dog runs quickly
   :END:

   :EXERCISE:
    the hungry dog chases the sleepy cat
   :END:

:EXERCISE:
   Combinatorially speaking, how many different sentences can be found by repeated
   evaluations of =(find-derivation 'SENTENCE)=?
:END:

*** Expanding the Power 

   With this simple grammar is there a derivation for the following sentence?

   =the hungry sleepy dog runs=

   The answer is no. Adjectives do not follow other adjectives with the simple
   rule that ADJECTIVE produces either one terminal adjective (hungry) or the
   other (sleepy). English allows multiple adjectives, but it needs a more
   sophisticated rule, a \ldquo{}loopy\rdquo rule, i.e., a /recursive/ rule:
 
   ADJECTIVE \rightarrow ADJECTIVE ADJECTIVE \vert \lambda

*** More Sophistication Still

  What rules would you need to change or add to generate this sentence?

  =the quick brown fox jumps over the lazy dog=

*** TODO Answer

   ADJECTIVE \rightarrow hungry \vert sleepy \vert quick \vert brown \vert lazy

   PREPOSITION \rightarrow of \vert from \vert by \vert on \vert in \vert over \vert \dots

   PREPOSITIONAL-PHRASE \rightarrow PREPOSITION NOUN-PHRASE

   VERB-PHRASE \rightarrow VERB PREPOSITIONAL-PHRASE

#+BEGIN_SRC emacs-lisp
  (setq parsed [S [NP [ART the] [ADJ [ADJ quick] [ADJ brown]] [N
        fox]] [VP [V jumps] [PP [P over] [NP [ART the] [ADJ lazy]
        [N dog]]]]])
  (kill-new (format "%s" parsed))
#+END_SRC

*** Visualize Derivation

    The derivation of a syntactically valid structured phrase can be visualized
    as the reverse of the process of building, from the bottom up, i.e., leaves
    to root, a *syntax tree* (AKA a *parse tree*).

    See http://www.ironcreek.net/phpsyntaxtree/.

**** TODO Include exercises to build parse trees for valid phrases.

*** TODO A Grammar for Well-formed S-expressions

  The basis for this grammar is a /skeleton/ for matching opening and closing
  parentheses, which has a recursive rule for enclosing in parentheses, and one for
  stretching out the length of the string:

  1. SKEL \rarr OP SKEL CP
  2. SKEL \rarr SKEL SKEL
  3. SKEL \rarr \lambda
  4. OP \rarr (
  5. CP \rarr )

  | SKEL | \rarr | SKEL SKEL             |
  |      | \rarr | OP SKEL CP SKEL       |
  |      | \rarr | OP OP SKEL CP CP SKEL |
  |      | \rarr | OP OP \lambda CP CP SKEL    |
  |      | \rarr | OP OP \lambda CP CP \lambda       |
  |      | \rarr | ( OP \lambda CP CP \lambda        |
  |      | \rarr | ( ( \lambda CP CP \lambda         |
  |      | \rarr | ( ( \lambda ) CP \lambda          |
  |      | \rarr | ( ( \lambda ) ) \lambda           |
  |      | \rarr | ( ( ) )               |

  But a simple choice between forward and reverse productions fails, because of
  the /three/ possible expansions for SKEL.

#+BEGIN_SRC emacs-lisp :results silent
  (setq es "" open "(" close ")"
        productions
        '((SKEL OP SKEL CP)
          (SKEL es)
          (OP open)
          (CP close))
        reverse-productions (reverse productions))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (problem find-derivation 'SKEL) 
#+END_SRC

#+RESULTS:

* TODO Save a Harder Challenge for DM2

  Go back to the original Grammar.

  Replace these three rules:

  ADJECTIVE \rightarrow Buffalo

  NOUN \rightarrow buffalo

  VERB \rightarrow buffalo

  With these new rules, is there a derivation for this "sentence"?!

** This is a sentence?!
   Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo

*** Meaning Explained
  (The) Buffalo buffalo (that) Buffalo buffalo (often) buffalo (in turn) buffalo
  (other) Buffalo buffalo.

* TODO Save Fancy Nouns for DM2

  Fancy nouns are *nested* nouns, for example "the fresh brownies that the
  little rascals without permission devoured" --- which could be rephrased as
  "the little rascals without permission devoured the fresh brownies, and it\rsquo{}s
  these brownies I want to focus on."

  So, a nested noun is a nested noun followed by a relative pronoun (e.g.,
  /that/) followed by a verb followed by a nested noun,

  OR,

  it\rsquo{}s a nested noun followed by a relative pronoun followed by a nested noun
  followed by a verb,

  OR,

  it\rsquo{}s a nested noun followed by a preposition followed by a nested noun,

  OR,

  it\rsquo{}s just an article followed by any number of adjectives followed by a plain
  old (non-nested) noun!

* Nested Nouns
 
  NESTED-NOUN \rightarrow NESTED-NOUN RELATIVE-PRONOUN VERB NESTED-NOUN

  NESTED-NOUN \rightarrow NESTED-NOUN RELATIVE-PRONOUN NESTED-NOUN VERB

  NESTED-NOUN \rightarrow PREPOSITION NESTED-NOUN

  NESTED-NOUN \rightarrow ARTICLE NOUN-PHRASE

  NOUN-PHRASE \rightarrow ADJECTIVE NOUN-PHRASE

  NOUN-PHRASE \rightarrow NESTED-NOUN

  NOUN-PHRASE \rightarrow NOUN
 
  ARTICLE \rightarrow a \vert an \vert the \vert \lambda

  RELATIVE-PRONOUN \rightarrow that \vert \lambda

  PREPOSITION \rightarrow of \vert from \vert by \vert \dots

** Now It\rsquo{}s Possible

   Let NN = NESTED-NOUN, RP = RELATIVE-PRONOUN, es = \lambda (the empty string).

#+BEGIN_SRC emacs-lisp
  (setq parsed [S [NP [NN [NN [ART es] [NP [ADJ Buffalo] [NP [N
        buffalo]]]] [RP es] [NN [NP [ADJ Buffalo] [NP [N buffalo]]]][V
        buffalo]]] [VP [V buffalo]] [NP [ADJ Buffalo] [NP [N buffalo]]]])

  (kill-new (format "%s" parsed))
#+END_SRC

*** What is the Context?

  The grammar for English was long thought to be \ldquo{}Context Free\rdquo. (Endnote for
  article [[https://www.jstor.org/stable/4178381][English Is Not a Context-Free Language]], James Higginbotham, Linguistic Inquiry
  Vol. 15, No. 2 (Spring, 1984), pp. 225-234)

  The simple subset-of-English grammar is Context Free. By way of contrast,
  here\rsquo{}s an example of two productions in a NON-Context-Free grammar:

  aAc \rightarrow aabc

  aAd \rightarrow abad

  Note that A\rsquo{}s expansion is different when it\rsquo{}s surrounded by a and c than when
  it\rsquo{}s surrounded by a and d. We say A\rsquo{}s interpretation has context
  "sensitivity". A Grammar/Language with this feature is called
  Context-Sensitive.

*** Regular Languages

  Moving down to the simplest type, a language is /regular/ if it can be built
  from its alphabet using the so-called /regular operations/ --- \cup (union), \circ
  (concatenation), and \star (star Endnote Kleene-star). How these work can be
  crudely illustrated using a type of graph (or /pseudograph/, as loops are allowed):

  Union: 0 \cup 1 \rarr make a node with a link to another node for each /disjunct/ (0
  or 1) --- so either path may be taken:

:      ()
:     /
:   0/
: ()
:   1\
:     \
:     ()

  Concatenation: 0 \circ 1 (or just 01) \rarr make a start node and a node for each
  symbol and a link for each /conjunct/ (0 and 1) /in sequence/:

: ()--0-->()--1-->()

  Star: 0^{\star} \rarr make a node with a loop labeled with the symbol being \ldquo{}starred\rdquo.

:      0
:    /   \
:    \   /
:     v /
:     ()

  How these separate operations compose into one graph can get quite
  complicated, but the most important rule is:

  /Every node must have an outgoing link for each symbol in the alphabet./

  Note that nodes can be split or merged (shared) and become a simpler graph
  modeling the same language.

  For example:

:      0              1
:    /   \          /   \
:    \   /          \   /
:     v /            v /
:     ()-----1------>(())
:      ^              |
:      |_____0________|

  This graph models the language of all bitstrings that end in 1, or as the
  regular language described thus: (0 \cup 1)^{\star}1

  The node corresponding to the \star has been split in two, one loop labeled 0 and
  the other labeled 1, while the link for the 0 for the \cup is shared with the
  loop/link for the \star.

  Regular grammars generate regular languages, and so are amenable to this kind
  of graph modeling. In this representation of grammar as graph, nodes
  correspond to the Nonterminals, and links between nodes are the terminals. In
  the so-called *state diagram* terminology, the nodes are called states and the
  links are called transitions,

*** TODO Insert simple one or two-state example.

  By convention, the start node or state, corresponding to the grammar\rsquo{}s Start
  symbol, is the node named =S= or with some symbol(s) followed by one or more
  trailing 0s (e.g., s0, s00, etc.). (Endnote: More conventionally, in
  these \ldquo{}state diagrams\rdquo{}, the start state is identified by an incoming arrow
  pointing to it (but coming from nowhere).)

: -->(s0)

  Sample state transition on a 0.

: (s1)---0--->(s2)
 
  Sample state transition on both 0 and 1 inputs.

: (s1)---0,1--->(s2)
 
  A double circle identifies an \ldquo{}accept\rdquo state. There can be more than one of
  these.

: ((s4))

  An accept state serves as a language membership detector. If a candidate input
  string is exhausted (entirely absorbed by the transitions from state to state)
  at the exact time an accept state is reached, the string is accepted as part
  of the language. A string exhausted in a non-accepting state is rejected ---
  it is NOT part of the language. If a machine accepts all strings that belong
  to the language, and rejects all those that do NOT belong to the language,
  then the machine is said to \ldquo{}recognize\rdquo the language.

  For example, the machine below recognizes the language [01 011 0111]:
 
: (S)--0-->(A)--1-->((B))--1-->((C))--1-->((D))

  More correctly (create endnote: to be a valid deterministic finite automaton),
  there should be transitions on each input character out of each state, thus:

: (S)--0-->(A)--1-->((B))--1-->((C))--1-->((D))
:  |        |         |          |          |
:  \1       |0        |0         |0         /0,1
:   \       |         |          |         /
:    +------+---------+----------+--------+
:                     |
:                     v
:                    (R)
:                    ^ \
:                   /   \
:                   \0,1/
:                    ---

   This machine realizes the 7-rule PSG below:
   1. S \rarr 0A
   2. A \rarr 1B
   3. B \rarr 1C
   4. B \rarr \lambda
   5. C \rarr 1D
   6. C \rarr \lambda
   7. D \rarr \lambda

**** Recursive rules create loops

      For example, the rule:

      A \rarr 0A

:      0
:    /   \
:    \   /
:     v /
:    (A)

      At node A, leave on a 0 and go back to A, as if the 0 in the rule were
      pulled to the left to label the arrow, and the A on the right were moved
      over and merged with the A on the left.

      For another example, the grammar:
      1. S \rarr 1A
      2. A \rarr 0A
      3. A \rarr 1A
      4. A \rarr \lambda

         is represented thus:

:          0,1
:         /   \
:         \   /
:          v /
: (S)--1-->(A)

*** A 4-State Example

    This machine recognizes the language of all strings over [0 1] (i.e., all
    /bitstrings/) whose /second-to-last/ bit is a 0:

:    1
:  /   \
:  \   /
:   v /
:  (s0)---0--->(s1)
:    ^         ^/|
:    |        // |
:    |       //  |
:    |      //   |
:    1     01    0
:    |    //     |
:    |   //      | 
:    |  //       |
:    | //        |
:    |/v         v 
: ((s3))<--1--((s2))
:               ^ \
:              /   \
:              \   /
:                0
 

*** A Modeling Example
  A simple machine can be built to model the three-production grammar:

  1. S \rarr A1
  2. A \rarr A0
  3. A \rarr \lambda
  
  This grammar generates the simple language consisting of any number of zeros
  (including zero zeros) followed by a single 1.
  
  The graph below (besides being a pseudograph, because of the loop) is a
  \ldquo{}weighted\rdquo (actually just link-labeled) directed graph with two nodes and two
  links.

:     _0_
:    /   \
:    \   /
:     v /
:     (S)---1--->((F))

*** DONE Draw state diagram for this simple 1-bit computer
    CLOSED: [2017-05-13 Sat 13:27]
     Consider a 1-bit computer controlling some lights in a room equipped with
     motion sensors. The lights are either off or on. The state of the lights
     can thus be remembered with just 1 bit of memory --- 0 for off and 1 for
     on. The lights are controlled --- toggled on and off --- based on motion
     (or lack thereof) detected by the motion sensors, which are also connected
     to a timer.

     The lights are initially off, so the computer starts in the OFF state. In
     this state, only the MOTION input causes it to move to the ON state, which
     causes the lights to go on. In the ON state, a MOTION input causes it to
     remain in the ON state (the lights stay on), and also resets the no-motion
     timer. With the timer reset, after a certain time elapses (with no further
     MOTION inputs) the input NO-MOTION is triggered. This input causes it to
     move to the OFF state, which turns the lights off.

:  /\         /\
: NO \       / MO 
:  \ /       \ /
:   v         v
: (OFF)--MO->(ON)
:   ^         |
:   |         |
:   +----NO---+

** TODO Save for DM2 this more detailed description/definition
   A language is /regular/ *iff* some /regular expression/ describes it.

   Regular expressions use the so-called regular operations (\cup, \circ, and \star) ---
   (union, concatenation, and star) --- to build regular languages. Here is a
   recursive definition:

  R is a *regular expression* (an *re* for short) if R is any of

  - \emptyset
  - {\lambda}
  - {a} for some a \in \Sigma
  - R_1 \cup R_2, where R_1 and R_2 are *re*\rsquo{}s
  - R_1 \circ R_2, where R_1 and R_2 are *re*\rsquo{}s
  - R^{\star}, where R is an *re*
 
  Some shorthand:

  - a \equiv \{a\}
  - \lambda \equiv \{\lambda\}
  - R^{\plus} \equiv R \circ R^{\star}
  - R^{\star} \equiv R^{\plus} \cup \lambda
  - R^k \equiv R \circ R \circ R \circ \dots \circ R (k times)

  Note: R \circ R is usually written without the \circ, i.e., RR. In this way \circ is
  analogous to the multiplication operator.

** TODO Give some examples of *re*'s
   Like 01^{\star} ; 0(0 \cup 1)^{\star} 

** Forward Exercises

  What language is generated by a given grammar?

  Let V = [S A B] and T = [0 1]. Find the language generated by each grammar

  [V T S P]

  when the set P of productions consists of each of the following:

*** 1

    S \rightarrow AB

    A \rightarrow 01

    B \rightarrow 11

*** 2

    S \rightarrow AB

    S \rightarrow 0A

    A \rightarrow 0

    B \rightarrow 10

*** 3

    S \rightarrow AB

    S \rightarrow AA

    A \rightarrow 0B

    A \rightarrow 01

    B \rightarrow 1

*** 4

    S \rightarrow AA

    S \rightarrow B

    A \rightarrow 00A

    A \rightarrow 00

    B \rightarrow 1B

    B \rightarrow 1

*** 5

    S \rightarrow AB

    A \rightarrow 0A1

    B \rightarrow 1B0

    A \rightarrow \lambda

    B \rightarrow \lambda

#+BEGIN_SRC emacs-lisp :results silent
  (setq es "" a "0" b "1"
        productions
        '((S A B)
          (A a A b)
          (B b B a)
          (A es)
          (B es))
        reverse-productions (reverse productions))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (find-derivation 'S)
#+END_SRC

#+RESULTS:
: 0 0  1 1 1 1  0 0

** Reverse Exercises

  What grammar generates a given language?

*** 1

    Construct a PSG to generate {0^{2n }1 \vert n \ge 0}.

*** 2

    Construct a PSG to generate {0^{n }1^{2n} \vert n \ge 0}.

*** 3

    Construct a PSG to generate {0^n 1^m 0^n \vert m \ge 0 and n \ge 0}.

*** ILO  

   Noam Chomsky is a linguist who first proposed the hierarchical language
   classification scheme that now bears his name.

**** The Chomsky Hierarchy

: Universal Set of All Languages (the superset of Types 0-3)
:   +------------------------------------------------------+
:   |   Type 0 Recursively Enumerable Languages            |
:   |   +----------------------------------------------+   |
:   |   |    Type 1 Context Sensitive Languages        |   |
:   |   |    +-------------------------------------+   |   |
:   |   |    |   Type 2 Context Free Languages     |   |   |
:   |   |    |   +-----------------------------+   |   |   |
:   |   |    |   |  Type 3 Regular Languages   |   |   |   |
:   |   |    |   |                             |   |   |   |
:   |   |    |   |                             |   |   |   |
:   |   |    |   +-----------------------------+   |   |   |
:   |   |    |                                     |   |   |
:   |   |    +-------------------------------------+   |   |
:   |   |                                              |   |
:   |   +----------------------------------------------+   |
:   |                                                      |
:   +------------------------------------------------------+

**** A Tabular Taxonomy

   The following table maps the notions of language classes with the types of
   grammars that can generate those languages. The restrictions on productions
   distinguish what\rsquo{}s what (where N = Nonterminal, tl = terminal, LHS =
   Left-Hand Side, RHS = Right-Hand Side). 

   | Language Class         | Type | Restrictions on Grammar Productions       |
   |------------------------+------+-------------------------------------------|
   | Recursively Enumerable |    0 | No restrictions                           |
   |                        |      | (length of LHS may exceed length of RHS). |
   |                        |      |                                           |
   | Context Sensitive      |    1 | LHS may have more than one Nonterminal,   |
   |                        |      | but the length of the LHS must be         |
   |                        |      | at most the length of the RHS             |
   |                        |      | (except for S \rarr \lambda productions).           |
   |                        |      |                                           |
   | Context Free           |    2 | Each LHS must have only one Nonterminal.  |
   |                        |      |                                           |
   | Regular                |    3 | Left-linear or Right-linear               |
   |                        |      | (each RHS must be either a tl or \lambda,       |
   |                        |      | or have a single Nonterminal and be       |
   |                        |      | all like Ntl, or all like tlN).           |

**** TODO Redo These Classification Exercises

   Can you distinguish grammar types?

   Let N = [S A B], T = [a b], and G = [N T S P] (P to be given later).

   Determine whether G

   - is a type 0 grammar but not a type 1 grammar, or
   - is a type 1 grammar but not a type 2 grammar, or
   - is a type 2 grammar but not a type 3 grammar, or 
   - is a type 3 grammar,

   when P, the set of productions, is one of the following:

**** 1

:EXERCISE:
    S \rightarrow 0AB 

    A \rightarrow B1

    B \rightarrow \lambda
:END:

**** 2

:EXERCISE:
    S \rightarrow 0A

    A \rightarrow 0

    A \rightarrow 1
:END:

**** 3

:EXERCISE:
    S \rightarrow AB0

    AB \rightarrow 0
:END:

**** 4

:EXERCISE:
    S \rightarrow ABA

    A \rightarrow 0B

    B \rightarrow 01
:END:

**** 5

:EXERCISE:
    S \rightarrow 0A

    0A \rightarrow B

    B \rightarrow 0A

    A \rightarrow 1
:END:

**** 6

:EXERCISE:
    S \rightarrow 1A

    A \rightarrow 1

    S \rightarrow \lambda
:END:

**** 7

:EXERCISE:
    S \rightarrow AB

    B \rightarrow 0A1

    0A1 \rightarrow 1
:END:

* )

** TODO Remove this heading once endnotes are in place
  Endnote about Sieve of Eratosthenes (delving deeper into PRIMES):

#+BEGIN_SRC emacs-lisp
  (loop for n from 2 to 97 by 7
        collect (loop for i from 0 below 7
                      collect (+ i n)))
#+END_SRC

  |  2 |  3 |  4 |  5 |  6 |  7 |  8 |
  |  9 | 10 | 11 | 12 | 13 | 14 | 15 |
  | 16 | 17 | 18 | 19 | 20 | 21 | 22 |
  | 23 | 24 | 25 | 26 | 27 | 28 | 29 |
  | 30 | 31 | 32 | 33 | 34 | 35 | 36 |
  | 37 | 38 | 39 | 40 | 41 | 42 | 43 |
  | 44 | 45 | 46 | 47 | 48 | 49 | 50 |
  | 51 | 52 | 53 | 54 | 55 | 56 | 57 |
  | 58 | 59 | 60 | 61 | 62 | 63 | 64 |
  | 65 | 66 | 67 | 68 | 69 | 70 | 71 |
  | 72 | 73 | 74 | 75 | 76 | 77 | 78 |
  | 79 | 80 | 81 | 82 | 83 | 84 | 85 |
  | 86 | 87 | 88 | 89 | 90 | 91 | 92 |
  | 93 | 94 | 95 | 96 | 97 | 98 | 99 |

  We take these results and then manually sieve them --- filtering out all
  nonprimes --- by crossing out every other number (after 2 --- so 4, 6, 8, etc.
  are crossed out), which excludes the multiples of 2, every third number (after
  3), which drops the multiples of 3, every fifth number (after 5) to filter out
  the multiples of 5, etc. Note that some numbers (e.g., the multiples of 6) get
  crossed out twice --- once for the multiples-of-2 sieving, once for the
  multiples-of-3 sieving --- and this is an acceptable redundancy, as it avoids
  the continual use of a conditional that says only cross a number out if it is
  not already crossed out!

  |    2 |    3 |  +4+ |    5 |  +6+ |    7 |  +8+ |
  |    9 | +10+ |   11 | +12+ |   13 | +14+ |   15 |
  | +16+ |   17 | +18+ |   19 | +20+ |   21 | +22+ |
  |   23 | +24+ |   25 | +26+ |   27 | +28+ |   29 |
  | +30+ |   31 | +32+ |   33 | +34+ |   35 | +36+ |
  |   37 | +38+ |   39 | +40+ |   41 | +42+ |   43 |
  | +44+ |   45 | +46+ |   47 | +48+ |   49 | +50+ |
  |   51 | +52+ |   53 | +54+ |   55 | +56+ |   57 |
  | +58+ |   59 | +60+ |   61 | +62+ |   63 | +64+ |
  |   65 | +66+ |   67 | +68+ |   69 | +70+ |   71 |
  | +72+ |   73 | +74+ |   75 | +76+ |   77 | +78+ |
  |   79 | +80+ |   81 | +82+ |   83 | +84+ |   85 |
  | +86+ |   87 | +88+ |   89 | +90+ |   91 | +92+ |
  |   93 | +94+ |   95 | +96+ |   97 | +98+ |   99 |

  Now cross out the multiples of 3:

  |    2 |    3 |  +4+ |    5 |  +6+ |    7 |  +8+ |
  |  +9+ | +10+ |   11 | +12+ |   13 | +14+ | +15+ |
  | +16+ |   17 | +18+ |   19 | +20+ | +21+ | +22+ |
  |   23 | +24+ |   25 | +26+ | +27+ | +28+ |   29 |
  | +30+ |   31 | +32+ | +33+ | +34+ |   35 | +36+ |
  |   37 | +38+ | +39+ | +40+ |   41 | +42+ |   43 |
  | +44+ | +45+ | +46+ |   47 | +48+ |   49 | +50+ |
  | +51+ | +52+ |   53 | +54+ |   55 | +56+ | +57+ |
  | +58+ |   59 | +60+ |   61 | +62+ | +63+ | +64+ |
  |   65 | +66+ |   67 | +68+ | +69+ | +70+ |   71 |
  | +72+ |   73 | +74+ | +75+ | +76+ |   77 | +78+ |
  |   79 | +80+ | +81+ | +82+ |   83 | +84+ |   85 |
  | +86+ | +87+ | +88+ |   89 | +90+ |   91 | +92+ |
  | +93+ | +94+ |   95 | +96+ |   97 | +98+ | +99+ |

  Now cross out the multiples of 5:

  |    2 |    3 |  +4+ |    5 |  +6+ |    7 |  +8+ |
  |  +9+ | +10+ |   11 | +12+ |   13 | +14+ | +15+ |
  | +16+ |   17 | +18+ |   19 | +20+ | +21+ | +22+ |
  |   23 | +24+ | +25+ | +26+ | +27+ | +28+ |   29 |
  | +30+ |   31 | +32+ | +33+ | +34+ | +35+ | +36+ |
  |   37 | +38+ | +39+ | +40+ |   41 | +42+ |   43 |
  | +44+ | +45+ | +46+ |   47 | +48+ |   49 | +50+ |
  | +51+ | +52+ |   53 | +54+ | +55+ | +56+ | +57+ |
  | +58+ |   59 | +60+ |   61 | +62+ | +63+ | +64+ |
  | +65+ | +66+ |   67 | +68+ | +69+ | +70+ |   71 |
  | +72+ |   73 | +74+ | +75+ | +76+ |   77 | +78+ |
  |   79 | +80+ | +81+ | +82+ |   83 | +84+ | +85+ |
  | +86+ | +87+ | +88+ |   89 | +90+ |   91 | +92+ |
  | +93+ | +94+ | +95+ | +96+ |   97 | +98+ | +99+ |

  Now cross out the three remaining multiples of 7:

  |    2 |    3 |  +4+ |    5 |  +6+ |    7 |  +8+ |
  |  +9+ | +10+ |   11 | +12+ |   13 | +14+ | +15+ |
  | +16+ |   17 | +18+ |   19 | +20+ | +21+ | +22+ |
  |   23 | +24+ | +25+ | +26+ | +27+ | +28+ |   29 |
  | +30+ |   31 | +32+ | +33+ | +34+ | +35+ | +36+ |
  |   37 | +38+ | +39+ | +40+ |   41 | +42+ |   43 |
  | +44+ | +45+ | +46+ |   47 | +48+ | +49+ | +50+ |
  | +51+ | +52+ |   53 | +54+ | +55+ | +56+ | +57+ |
  | +58+ |   59 | +60+ |   61 | +62+ | +63+ | +64+ |
  | +65+ | +66+ |   67 | +68+ | +69+ | +70+ |   71 |
  | +72+ |   73 | +74+ | +75+ | +76+ | +77+ | +78+ |
  |   79 | +80+ | +81+ | +82+ |   83 | +84+ | +85+ |
  | +86+ | +87+ | +88+ |   89 | +90+ | +91+ | +92+ |
  | +93+ | +94+ | +95+ | +96+ |   97 | +98+ | +99+ |

  Now to do with code what we just did manually. We cross out a number by
  negating it (making it negative) and must use a conditional to avoid undoing
  that negation once done.

#+BEGIN_SRC emacs-lisp
  (defun negate-multiple (n m)
    (if (and (/= n m) (zerop (mod n m)))
        (if (< n 0) n (- n))
      n))

  (let* ((all (number-sequence 2 99))
         (all-minus-multiples-of-2
          (mapcar (lambda (n) (negate-multiple n 2))
                  all))
         (all-minus-multiples-of-2-and-3
          (mapcar (lambda (n) (negate-multiple n 3))
                  all-minus-multiples-of-2))
         (all-minus-multiples-of-2-and-3-and-5
          (mapcar (lambda (n) (negate-multiple n 5))
                  all-minus-multiples-of-2-and-3))
         (all-minus-multiples-of-2-and-3-and-5-and-7
          (mapcar (lambda (n) (negate-multiple n 7))
                  all-minus-multiples-of-2-and-3-and-5)))
    (list all-minus-multiples-of-2 all-minus-multiples-of-2-and-3
          all-minus-multiples-of-2-and-3-and-5 all-minus-multiples-of-2-and-3-and-5-and-7
          (remove-if-not 'math-posp all-minus-multiples-of-2-and-3-and-5-and-7)))
#+END_SRC

  | 2 | 3 | -4 | 5 | -6 |  7 | -8 |  9 | -10 | 11 | -12 | 13 | -14 |  15 | -16 | 17 | -18 | 19 | -20 |  21 | -22 | 23 | -24 |  25 | -26 |  27 | -28 | 29 | -30 | 31 | -32 |  33 | -34 |  35 | -36 | 37 | -38 |  39 | -40 | 41 | -42 | 43 | -44 |  45 | -46 | 47 | -48 |  49 | -50 |  51 | -52 | 53 | -54 |  55 | -56 |  57 | -58 | 59 | -60 | 61 | -62 |  63 | -64 |  65 | -66 | 67 | -68 |  69 | -70 | 71 | -72 | 73 | -74 |  75 | -76 |  77 | -78 | 79 | -80 |  81 | -82 | 83 | -84 |  85 | -86 |  87 | -88 | 89 | -90 |  91 | -92 |  93 | -94 |  95 | -96 | 97 | -98 |  99 |
  | 2 | 3 | -4 | 5 | -6 |  7 | -8 | -9 | -10 | 11 | -12 | 13 | -14 | -15 | -16 | 17 | -18 | 19 | -20 | -21 | -22 | 23 | -24 |  25 | -26 | -27 | -28 | 29 | -30 | 31 | -32 | -33 | -34 |  35 | -36 | 37 | -38 | -39 | -40 | 41 | -42 | 43 | -44 | -45 | -46 | 47 | -48 |  49 | -50 | -51 | -52 | 53 | -54 |  55 | -56 | -57 | -58 | 59 | -60 | 61 | -62 | -63 | -64 |  65 | -66 | 67 | -68 | -69 | -70 | 71 | -72 | 73 | -74 | -75 | -76 |  77 | -78 | 79 | -80 | -81 | -82 | 83 | -84 |  85 | -86 | -87 | -88 | 89 | -90 |  91 | -92 | -93 | -94 |  95 | -96 | 97 | -98 | -99 |
  | 2 | 3 | -4 | 5 | -6 |  7 | -8 | -9 | -10 | 11 | -12 | 13 | -14 | -15 | -16 | 17 | -18 | 19 | -20 | -21 | -22 | 23 | -24 | -25 | -26 | -27 | -28 | 29 | -30 | 31 | -32 | -33 | -34 | -35 | -36 | 37 | -38 | -39 | -40 | 41 | -42 | 43 | -44 | -45 | -46 | 47 | -48 |  49 | -50 | -51 | -52 | 53 | -54 | -55 | -56 | -57 | -58 | 59 | -60 | 61 | -62 | -63 | -64 | -65 | -66 | 67 | -68 | -69 | -70 | 71 | -72 | 73 | -74 | -75 | -76 |  77 | -78 | 79 | -80 | -81 | -82 | 83 | -84 | -85 | -86 | -87 | -88 | 89 | -90 |  91 | -92 | -93 | -94 | -95 | -96 | 97 | -98 | -99 |
  | 2 | 3 | -4 | 5 | -6 |  7 | -8 | -9 | -10 | 11 | -12 | 13 | -14 | -15 | -16 | 17 | -18 | 19 | -20 | -21 | -22 | 23 | -24 | -25 | -26 | -27 | -28 | 29 | -30 | 31 | -32 | -33 | -34 | -35 | -36 | 37 | -38 | -39 | -40 | 41 | -42 | 43 | -44 | -45 | -46 | 47 | -48 | -49 | -50 | -51 | -52 | 53 | -54 | -55 | -56 | -57 | -58 | 59 | -60 | 61 | -62 | -63 | -64 | -65 | -66 | 67 | -68 | -69 | -70 | 71 | -72 | 73 | -74 | -75 | -76 | -77 | -78 | 79 | -80 | -81 | -82 | 83 | -84 | -85 | -86 | -87 | -88 | 89 | -90 | -91 | -92 | -93 | -94 | -95 | -96 | 97 | -98 | -99 |
  | 2 | 3 |  5 | 7 | 11 | 13 | 17 | 19 |  23 | 29 |  31 | 37 |  41 |  43 |  47 | 53 |  59 | 61 |  67 |  71 |  73 | 79 |  83 |  89 |  97 |     |     |    |     |    |     |     |     |     |     |    |     |     |     |    |     |    |     |     |     |    |     |     |     |     |     |    |     |     |     |     |     |    |     |    |     |     |     |     |     |    |     |     |     |    |     |    |     |     |     |     |     |    |     |     |     |    |     |     |     |     |     |    |     |     |     |     |     |     |     |    |     |     |

  This final sieve operates stage by stage (recording a copy of each stage for
  later inspection) using a recursive deletion of nonprimes, starting with a
  complete number sequence from 2 to some limit. Not the most efficient sieve,
  but passable.

#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (setq stages nil)

  (defun delete-nonprimes (a)
    (push (copy-sequence a) stages)
    (if (> (length a) 1)
        (delete-if (lambda (n) (zerop (mod n (car a)))) (cdr a)))
    (if (> (length a) 1)
        (delete-nonprimes (cdr a)))
    a)

  (defun sieve-of-Eratosthenes (limit)
    (delete-nonprimes (number-sequence 2 limit))) 
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (sieve-of-Eratosthenes 99) 
#+END_SRC

 | 2 | 3 | 5 | 7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |

#+BEGIN_SRC emacs-lisp
  stages 
#+END_SRC

  | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  |  7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 49 | 53 | 59 | 61 | 67 | 71 | 73 | 77 | 79 | 83 | 89 | 91 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  |  5 |  7 | 11 | 13 | 17 | 19 | 23 | 25 | 29 | 31 | 35 | 37 | 41 | 43 | 47 | 49 | 53 | 55 | 59 | 61 | 65 | 67 | 71 | 73 | 77 | 79 | 83 | 85 | 89 | 91 | 95 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  |  3 |  5 |  7 |  9 | 11 | 13 | 15 | 17 | 19 | 21 | 23 | 25 | 27 | 29 | 31 | 33 | 35 | 37 | 39 | 41 | 43 | 45 | 47 | 49 | 51 | 53 | 55 | 57 | 59 | 61 | 63 | 65 | 67 | 69 | 71 | 73 | 75 | 77 | 79 | 81 | 83 | 85 | 87 | 89 | 91 | 93 | 95 | 97 | 99 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |

  The results if the recording is simply =(push a stages)= shows how the
  destructive delete culls out nonprimes from the same =a= list on every stage:

  | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |    |
  | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |    |
  | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |    |
  | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |    |
  | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |    |
  | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |    |
  | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |    |
  | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |    |
  | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |    |
  | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |    |
  |  7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |    |
  |  5 |  7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |    |
  |  3 |  5 |  7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |    |
  |  2 |  3 |  5 |  7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 |

*** TODO Create a closure-based elisp version of
    [[file:~/PrimeNumbers/RobSieve7.java][Robert Thorne's prime sieve java code]]

#+BEGIN_SRC emacs-lisp
  (some '< [3 2 4] [1 1 4]) 
  (calc-eval "nextprime($1)" 'raw 77777777777)
  (let ((max-specpdl-size 10000))
    (calc-eval "nextprime($1)" nil (calc-eval "fact($1)" nil 100)))
  (let ((r3dn (math-random-three-digit-number)))
    (while (< r3dn 100) (setq r3dn (math-random-three-digit-number)))
    r3dn)
#+END_SRC

#+RESULTS:
: 869

  From the book /Incompleteness: The Proof and Paradox of Kurt G\ouml{}del/, by
  Rebecca Goldstein, it is on page 110, where G\ouml{}del is quoted as saying, "The
  more I think about language, the more it amazes me that people ever understand
  each other." See also page 112, at the top.

** TODO For an Epilogue

  Solving a math problem to get clues to Til\rsquo{}s unknown whereabouts is a fitting
  conclusion, while also foreshadowing further adventures/installments of TIA
  interaction.

  Til has gone missing for two weeks. He knows where he is, but has no way to
  communicate his location in the desert where he went to seek solitude.
  Something he feels compelled to do from time to time, much to his wife\rsquo{}s
  dismay. This time he is in some kind of trouble, trapped without means to get
  out on his own.

  The problem is, his tracer (read GPS) signal is encrypted, in a very eccentric
  way. This way may have something to do with the final exercise/problem/puzzle
  he gave Abu and Ila, namely to find the connection between Edgar Allan Poe and
  the phrase \ldquo{}Notice cousin Felipe\rdquo.
